generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  phoneNumber     String?
  apnsDeviceToken String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  notifications   Notification[]
  subscriptions   Subscription[]
  articleVotes    ArticleVote[]
}

model RssFeed {
  id            String    @id @default(cuid())
  name          String
  url           String    @unique
  category      String?
  isActive      Boolean   @default(true)
  lastFetchedAt DateTime?
  fetchInterval Int       @default(300)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  articles      Article[]
}

model Article {
  id                       String            @id @default(cuid())
  title                    String
  description              String?
  link                     String            @unique
  publishedAt              DateTime
  guid                     String?
  author                   String?
  imageUrl                 String?
  severity                 SeverityLevel?    @default(MEDIUM)
  feedId                   String
  createdAt                DateTime          @default(now())
  content                  String?
  categories               String[]
  location                 String?
  agencies                 String[]
  summary                  String?
  recommendations          String?
  updatedAt                DateTime          @updatedAt
  alertType                AlertType?        @default(SECURITY_MENTION)
  classificationConfidence Float?            @default(0.5)
  voteCount                Int               @default(0)
  slug                     String?           @unique
  feed                     RssFeed           @relation(fields: [feedId], references: [id])
  incidents                Incident[]
  matchedAgencies          MatchedAgency[]
  matchedCompanies         MatchedCompany[]
  matchedKeywords          MatchedKeyword[]
  matchedLocations         MatchedLocation[]
  notifications            Notification[]
  votes                    ArticleVote[]

  @@index([publishedAt])
  @@index([feedId])
  @@index([severity])
  @@index([location])
  @@index([alertType])
  @@index([voteCount])
  @@index([slug])
}

model Company {
  id               String           @id @default(cuid())
  name             String           @unique
  domain           String?
  aliases          String[]
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  description      String?
  industry         String?
  website          String?
  headquarters     String?
  foundedYear      Int?
  employees        String?
  logo             String?
  matchedCompanies MatchedCompany[]
  subscriptions    Subscription[]
}

model Keyword {
  id              String           @id @default(cuid())
  term            String           @unique
  category        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  matchedKeywords MatchedKeyword[]
  subscriptions   Subscription[]
}

model Subscription {
  id              String           @id @default(cuid())
  userId          String
  type            SubscriptionType
  targetId        String?          // @deprecated - Use specific ID fields instead
  
  // Separate fields for each entity type
  companyId       String?
  agencyId        String?
  locationId      String?
  keywordId       String?
  
  emailEnabled    Boolean          @default(true)
  smsEnabled      Boolean          @default(false)
  pushEnabled     Boolean          @default(false)
  isActive        Boolean          @default(true)
  severityFilter  SeverityLevel?
  locationFilter  String?
  keywordFilters  String[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  alertTypeFilter AlertType[]      @default([CONFIRMED_BREACH, SECURITY_INCIDENT, SECURITY_MENTION])
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  company         Company?         @relation(fields: [companyId], references: [id])
  agency          Agency?          @relation(fields: [agencyId], references: [id])
  location        Location?        @relation(fields: [locationId], references: [id])
  keyword         Keyword?         @relation(fields: [keywordId], references: [id])

  @@unique([userId, type, companyId])
  @@unique([userId, type, agencyId])
  @@unique([userId, type, locationId])
  @@unique([userId, type, keywordId])
  @@unique([userId, type, targetId]) // Keep for backward compatibility
  @@index([userId])
  @@index([targetId])
  @@index([companyId])
  @@index([agencyId])
  @@index([locationId])
  @@index([keywordId])
}

model MatchedKeyword {
  id           String   @id @default(cuid())
  articleId    String
  keywordId    String
  matchContext String?
  createdAt    DateTime @default(now())
  article      Article  @relation(fields: [articleId], references: [id])
  keyword      Keyword  @relation(fields: [keywordId], references: [id])

  @@unique([articleId, keywordId])
  @@index([articleId])
  @@index([keywordId])
}

model Notification {
  id        String             @id @default(cuid())
  userId    String
  articleId String
  type      NotificationType
  status    NotificationStatus @default(PENDING)
  sentAt    DateTime?
  error     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  article   Article            @relation(fields: [articleId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@unique([userId, articleId, type])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Agency {
  id              String          @id @default(cuid())
  name            String          @unique
  country         String          @default("US")
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  acronym         String?
  type            AgencyType      @default(GOVERNMENT)
  matchedAgencies MatchedAgency[]
  subscriptions   Subscription[]
}

model Location {
  id               String            @id @default(cuid())
  name             String            @unique
  country          String
  region           String?
  coordinates      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  city             String?
  matchedLocations MatchedLocation[]
  subscriptions    Subscription[]
}

model MatchedCompany {
  id           String   @id @default(cuid())
  articleId    String
  companyId    String
  matchContext String?
  createdAt    DateTime @default(now())
  confidence   Float    @default(1.0)
  article      Article  @relation(fields: [articleId], references: [id])
  company      Company  @relation(fields: [companyId], references: [id])

  @@unique([articleId, companyId])
  @@index([articleId])
  @@index([companyId])
}

model MatchedAgency {
  id           String   @id @default(cuid())
  articleId    String
  agencyId     String
  matchContext String?
  createdAt    DateTime @default(now())
  confidence   Float    @default(1.0)
  agency       Agency   @relation(fields: [agencyId], references: [id])
  article      Article  @relation(fields: [articleId], references: [id])

  @@unique([articleId, agencyId])
  @@index([articleId])
  @@index([agencyId])
}

model MatchedLocation {
  id           String   @id @default(cuid())
  articleId    String
  locationId   String
  matchContext String?
  createdAt    DateTime @default(now())
  confidence   Float    @default(1.0)
  article      Article  @relation(fields: [articleId], references: [id])
  location     Location @relation(fields: [locationId], references: [id])

  @@unique([articleId, locationId])
  @@index([articleId])
  @@index([locationId])
}

model Incident {
  id               String         @id @default(cuid())
  articleId        String
  title            String
  description      String
  severity         SeverityLevel
  affectedEntities String[]
  incidentType     IncidentType
  timeline         Json?
  impact           String?
  status           IncidentStatus @default(ACTIVE)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  article          Article        @relation(fields: [articleId], references: [id])

  @@index([severity])
  @@index([incidentType])
  @@index([status])
}

enum SubscriptionType {
  COMPANY
  KEYWORD
  AGENCY
  LOCATION
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AgencyType {
  GOVERNMENT
  REGULATORY
  LAW_ENFORCEMENT
  MILITARY
  CYBERSECURITY
}

enum IncidentType {
  DATA_BREACH
  RANSOMWARE
  MALWARE
  PHISHING
  VULNERABILITY
  DDOS
  INSIDER_THREAT
  SUPPLY_CHAIN
  OTHER
}

enum IncidentStatus {
  ACTIVE
  CONTAINED
  RESOLVED
  INVESTIGATING
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum AlertType {
  CONFIRMED_BREACH
  SECURITY_INCIDENT
  SECURITY_MENTION
}

model ArticleVote {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  voteType  VoteType
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
  @@index([articleId])
  @@index([userId])
}

enum VoteType {
  UP
  DOWN
}
